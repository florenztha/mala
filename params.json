{
  "name": "Mala",
  "tagline": "M책la: a lightweight <canvas> drawing library",
  "body": "# M책la\r\n\r\n**M책la** is swedish for painting. This is a lightweight (less than 7kB) library to paint on the HTML5 ```<canvas>``` element.\r\n\r\n## Setup\r\n\r\n### Use with browserify\r\n\r\n```\r\n$ npm install mala\r\n```\r\n\r\nAnd \r\n\r\n```\r\nvar Mala = require('mala')\r\n```\r\n\r\n### Use directly in an HTML page\r\n\r\nDownload ```mala.min.js``` [here](https://raw.githubusercontent.com/idris-maps/mala/master/dist/mala.min.js)\r\n\r\nAnd add it to the page\r\n\r\n```\r\n<script src=\"mala.min.js\"></script>\r\n```\r\n\r\n## Usage\r\n\r\n### Initialise\r\n\r\nAdd a ```<div>``` to your HTML with a unique id.\r\n\r\n```\r\n<div id=\"myPainting\"></div>\r\n```\r\n\r\nAdd a canvas within the div by creating a new instance of M책la that takes two arguments:\r\n* The id of the div\r\n* The desired size of the canvas\r\n\r\n```\r\nvar paint = new Mala('myPainting', { width: 1000, height: 500 })\r\n```\r\n\r\nNow you can add **rectangles**, **circles**, **lines**, **polygons**, **text** and **images** (see below). When you are done, draw the canvas with\r\n\r\n```\r\npaint.draw()\r\n```\r\n\r\n### Add a rectangle\r\n\r\n```\r\nvar firstRectangle = paint.rect(10, 10, 100, 50)\r\n```\r\n\r\n```.rect(x,y,width,height)``` takes four arguments:\r\n* x: The number of pixels to the right of the top-left corner\r\n* y: The number of pixels down from the top-left corner\r\n* width (in pixels)\r\n* height (in pixels)\r\n\r\n#### Style options\r\n\r\n* ```fill```: Any HTML color (defaults to ```'black'```)\r\n* ```stroke```: Any HTML color (defaults to ```undefined```)\r\n* ```opacity```: A number between 0 and 1 (defaults to ```1```)\r\n* ```lineWidth```: The width in pixels of the ```stroke``` (defaults to ```1```)\r\n* ```lineJoin```: The shape of the corners of the ```stroke``` (defaults to ```miter```, other possibilities are ```round``` and ```bevel```)\r\n\r\nSet the styles like this:\r\n\r\n```\r\nfirstRectangle.fill = 'blue'\r\nfirstRectangle.stroke = 'red'\r\n```\r\n\r\nExample: \r\n\r\n```\r\nvar paint = new Mala('c', {width: 200, height: 100})\r\n\r\n// Create the rectangle\r\nvar firstRectangle = paint.rect(10, 10, 100, 50)\r\n\r\n// Set the style\r\nfirstRectangle.fill = 'blue'\r\nfirstRectangle.stroke = 'red'\r\nfirstRectangle.lineWidth = 5\r\n\r\n// Render\r\npaint.draw()\r\n```\r\n\r\nLooks like this:\r\n\r\n<img src=\"img/rectangle.png\" />\r\n\r\n### Add a circle\r\n\r\n```\r\nvar firstCircle = paint.circle(50, 30, 20)\r\n```\r\n\r\n```.circle(x,y,r)``` takes four arguments:\r\n* x: The number of pixels to the right of the top-left corner\r\n* y: The number of pixels down from the top-left corner\r\n* r: The radius in pixels\r\n\r\n#### Style options\r\n\r\n* ```fill```: Any HTML color (defaults to ```'black'```)\r\n* ```stroke```: Any HTML color (defaults to ```undefined```)\r\n* ```opacity```: A number between 0 and 1 (defaults to ```1```)\r\n\r\nSet the styles like this:\r\n\r\n```\r\nfirstCircle.fill = 'green'\r\n```\r\n\r\n### Add a line\r\n\r\n```\r\nvar firstLine = paint.line([[10,10],[20,20],[20,30]])\r\n```\r\n\r\n```.line([[x1,y1],[x2,y2],[x3,y3]])``` takes one argument: an array of x and y coordinates\r\n\r\nTo draw curves add one or two control points like this:\r\n\r\n```\r\n.line([[x1,y1],[ctrlPoint1-x,ctrlPoint1-y,x2,y2],[x3,y3]])\r\n```\r\n\r\n(with one control point)\r\n\r\nor \r\n\r\n```\r\n.line([[x1,y1],[ctrlPoint1-x,ctrlPoint1-y,ctrlPoint2-x,ctrlPoint2-y,x2,y2],[x3,y3]])\r\n```\r\n\r\n(with two control points)\r\n\r\nExample with a simple line:\r\n\r\n```\r\npaint.line([[20,50],[180,50])\r\n```\r\n\r\n<img src=\"img/line_0.png\" />\r\n\r\nWith one control point at [100,20]\r\n\r\n```\r\npaint.line([[20,50],[100,20,180,50])\r\n```\r\n\r\n<img src=\"img/line_1.png\" />\r\n\r\nWith two control points at [40,20] and [160,20]\r\n\r\n```\r\npaint.line([[20,50],[40,20,160,20,180,50])\r\n```\r\n\r\n<img src=\"img/line_2.png\" />\r\n\r\n\r\n#### Style options\r\n\r\n* ```stroke```: Any HTML color (defaults to ```'black'```)\r\n* ```opacity```: A number between 0 and 1 (defaults to ```1```)\r\n* ```lineWidth```: The width in pixels of the ```stroke``` (defaults to ```1```)\r\n* ```lineJoin```: The shape of the corners of the ```stroke``` (defaults to ```miter```, other possibilities are ```round``` and ```bevel```)\r\n* ```lineCap```: The shape of the ends of the line (defaults to ```butt```, other possibilities are ```round``` and ```square```)\r\n\r\nSet the styles like this:\r\n\r\n```\r\nfirstLine.lineWidth = 5\r\nfirstLine.lineCap = 'round'\r\n```\r\n\r\n### Add a polygon\r\n\r\n```\r\nvar firstPolygon = paint.polygon([[[10,10],[20,20],[20,30]]])\r\n```\r\n\r\n```.polygon([[[x1,y1],[x2,y2],[x3,y3]]])```, takes one argument: an array of arrays of x and y coordinates. For curved sides of the polygon, add control points as with ```.line()```\r\n\r\n#### Style options\r\n\r\n* ```fill```: Any HTML color (defaults to ```'black'```)\r\n* ```stroke```: Any HTML color (defaults to ```undefined```)\r\n* ```opacity```: A number between 0 and 1 (defaults to ```1```)\r\n* ```lineWidth```: The width in pixels of the ```stroke``` (defaults to ```1```)\r\n* ```lineJoin```: The shape of the corners of the ```stroke``` (defaults to ```miter```, other possibilities are ```round``` and ```bevel```)\r\n\r\nSet styles like this:\r\n\r\n```\r\nfirstPolygon.fill = 'yellow'\r\n```\r\n\r\nTo make a hole in a polygon, add an array of coordinates in counter clockwise order.\r\n\r\n```\r\nvar paint = new Mala('c', {width: 200, height: 100})\r\nvar outlineArray = [[0,0],[0,100],[200,100]]\r\nvar holeArray = [[10,60],[10,80],[30,80]]\r\nvar polygonWithHole = paint.polygon([outlineArray, holeArray])\r\npaint.draw()\r\n```\r\n\r\n<img src=\"img/polygon_0.png\" />\r\n\r\n### Add text\r\n\r\n```\r\nvar firstText = paint.text('Hello world', 20, 30)\r\n```\r\n\r\n```.text(txt,x,y)``` takes three arguments:\r\n* txt: The text string\r\n* x: The number of pixels to the right of the top-left corner\r\n* y: The number of pixels down from the top-left corner\r\n\r\n#### Style options\r\n\r\n* ```fill```: Any HTML color (defaults to ```'black'```)\r\n* ```font```: A string with the font-size (followed by ```px```) and the font-family (defaults to ```'12px sans-serif'```)\r\n* ```stroke```: Any HTML color (defaults to ```undefined```)\r\n* ```opacity```: A number between 0 and 1 (defaults to ```1```)\r\n* ```lineWidth```: The width in pixels of the ```stroke``` (defaults to ```1```)\r\n\r\nSet styles like this:\r\n\r\n```\r\nfirstText.font = '20px Helvetica'\r\n``` \r\n\r\nExample:\r\n\r\n```\r\nvar paint = new Mala('c', {width: 200, height: 100})\r\n\r\n// Add text\r\nvar firstText = paint.text('Hello world', 20, 30)\r\n\r\n// Set style\r\nfirstText.font = '30px Helvetica'\r\nfirstText.fill = undefined\r\nfirstText.stroke = 'red'\r\n\r\n// Render\r\npaint.draw()\r\n```\r\n\r\n<img src=\"img/text.png\" />\r\n\r\n### Add an image\r\n\r\nIn order to add an image to the canvas, you first need to add the image file\r\n\r\n```\r\nvar myImage = paint.addImageFile('theImage.png')\r\n```\r\n\r\n```.addImageFile(pathToImage)``` takes one argument, the path to the file.\r\n\r\n**..............................................................................**\r\n\r\n**WARNING** \r\n\r\n```paint.draw()``` waits until all images are loaded to draw on canvas. If the path does not lead to a file, the **canvas will not be drawn**. \r\n\r\nIf you are doing an animation, use ```.addImageFile()``` before starting the animation. Even if you are not going to use it in the first frames.  \r\n\r\n**..............................................................................**\r\n\r\nOnce you have added a file with ```.addImageFile()```, you can add the image to the canvas like this:\r\n\r\n```\r\nvar firstImage = paint.image(myImage, 10, 10)\r\n```\r\n\r\n```.image(img, x, y)``` takes three arguments:\r\n* img: the image loaded with ```.addImageFile()```\r\n* x: The number of pixels to the right of the top-left corner\r\n* y: The number of pixels down from the top-left corner\r\n\r\nYou can add an image several times using ```.addImageFile()``` once:\r\n\r\n```\r\nvar myImage = paint.addImageFile('theImage.png')\r\nvar firstImage = paint.image(myImage, 10, 10)\r\nvar secondImage = paint.image(myImage, 100, 100)\r\n```\r\n\r\n#### Style options\r\n\r\n* ```opacity```: A number between 0 and 1 (defaults to ```1```)\r\n* ```width```: the width in pixels (defaults to the image files naturalWidth)\r\n* ```height```: the height in pixels (defaults to the image files naturalHeight)\r\n\r\nIf only ```width```, or only ```height```, is defined the aspect ratio will be preserved. If both are used, the image will have the defined ```width``` and ```height```.\r\n\r\nExamples with this image (100px wide and 80px high)\r\n\r\n<img src=\"img/troll.png\">\r\n\r\nAdd it to canvas\r\n\r\n```\r\nvar paint = new Mala('c', {width: 200, height: 100})\r\n\r\n// Setting a gray background to better see the image on the canvas\r\nvar r = paint.rect(0,0,200,100)\r\nr.fill = 'lightgray'\r\n\r\n// Add the file\r\nvar img = paint.addImageFile('troll.png')\r\n\r\n// Add the image\r\nvar img1 = paint.image(img, 0, 0)\r\n\r\n// Render\r\npaint.draw()\r\n```\r\n\r\nIt looks like this:\r\n\r\n<img src=\"img/img_0.png\" />\r\n\r\nIf we set only the width:\r\n\r\n```\r\nvar img1 = paint.image(img, 0, 0)\r\nimg1.width = 50\r\n```\r\n\r\n<img src=\"img/img_1.png\" />\r\n\r\nIf we set only the height:\r\n\r\n```\r\nvar img1 = paint.image(img, 0, 0)\r\nimg1.height = 100\r\n```\r\n\r\n<img src=\"img/img_2.png\" />\r\n\r\nIf we set both width and height:\r\n\r\n```\r\nvar img1 = paint.image(img, 0, 0)\r\nimg1.width = 50\r\nimg1.height = 100\r\n```\r\n\r\n<img src=\"img/img_3.png\" />\r\n\r\n### Layers\r\n\r\nWhen ```paint.draw()``` is triggered, all objects will be drawn in the order they have been added. The last above the ones before.\r\n\r\nIf we draw a rectangle, then a circle. The circle will be on top of the rectangle.\r\n\r\n```\r\nvar paint = new Mala('c', {width: 200, height: 100})\r\n\r\nvar rect = paint.rect(0,0,100,50)\r\nrect.fill = 'blue'\r\nrect.layer = 1\r\n\r\nvar circle = paint.circle(70,60,40)\r\ncircle.fill = 'red'\r\n\r\npaint.draw()\r\n```\r\n\r\nLooks like this:\r\n\r\n<img src=\"img/layer_0.png\" />\r\n\r\nBy default all added objects are on layer 0 (the bottom layer). If we want the rectangle in the example above to be on top although it is created before:\r\n\r\n```\r\nvar paint = new Mala('c', {width: 200, height: 100})\r\n\r\nvar rect = paint.rect(0,0,100,50)\r\nrect.fill = 'blue'\r\nrect.layer = 1 // <-- new line setting \"rect\" on layer 1\r\n\r\nvar circle = paint.circle(70,60,40)\r\ncircle.fill = 'red'\r\n\r\npaint.draw()\r\n```\r\n\r\nLooks like:\r\n\r\n<img src=\"img/layer_1.png\" />\r\n\r\n### Animation\r\n\r\n**M책la** does not provide any animation method, you will have to use your own. It does have two features that will help you animating: \r\n* the ```.move()``` method\r\n* the ```.show``` property \r\n\r\n#### .move()\r\n\r\nEvery object (rectangle, circle, line, polygon, text or image) can be \"moved\" with the method ```.move()```.\r\n\r\n```.move(x,y)``` takes two arguments:\r\n* x: the number of pixels by which we want to move the object horizontally\r\n* y: the number of pixels by which we want to move the object vertically\r\n\r\nIf we want to have a square moving across the canvas from left to right:\r\n\r\n```\r\nvar paint = new Mala('c', {width: 200, height: 100}) \r\n\r\nvar movingSquare = paint.rect(0,45,10,10) // <-- create the square\r\n\r\nsetInterval(function() {\r\n\tmovingSquare.move(1,0) // <-- move it\r\n\tpaint.draw() // <-- redraw the canvas to see the move\r\n},100)\r\n```\r\n\r\nThis will move the square one pixel to the right at every interval. Here the interval is set to 100, a tenth of a second.\r\n\r\nAnother way of animating is to move not at a certain interval in milliseconds but every time the screen is refreshed on your device by using ```requestAnimationFrame()``` instead of ```setInterval()```\r\n\r\nThis does the same using ```requestAnimationFrame()```. It is a bit faster because the screen is usually refreshed more often than every tenth of a second.\r\n\r\n```\r\nvar paint = new Mala('c', {width: 200, height: 100}) \r\n\r\nvar movingSquare = paint.rect(0,45,10,10) // <-- create the square\r\n\r\nrequestAnimationFrame(animate)\r\n\r\nfunction animate() {\r\n\tmovingSquare.move(1,0) // <-- move it\r\n\tpaint.draw() // <-- redraw the canvas to see the move\r\n\trequestAnimationFrame(animate)\r\n}\r\n```\r\n\r\n#### .show\r\n\r\nEvery object has a ```show``` attribute. By default it is set to ```true```, you can set it to ```false``` when you want the object not to be shown on the next frame but do not want to remove it permanently.\r\n\r\nIf we want to have a blinking circle:\r\n\r\n```\r\nvar paint = new Mala('c', {width: 200, height: 100})\r\n\r\nvar blinkingCircle = paint.circle(100,50, 20)\r\n\r\nsetInterval(function() {\r\n\r\n\t// set \"show\" to \"false\" if it is \"true\". If is \"false\", set it to \"true\"\r\n\r\n\tif(blinkingCircle.show === true) {\r\n\t\tblinkingCircle.show = false\r\n\t} else {\r\n\t\tblinkingCircle.show = true\r\n\t}\r\n\r\n\tpaint.draw() // <-- redraw\r\n\r\n},500)\r\n```\r\n\r\n#### paint.remove()\r\n\r\nIf you want to permanently remove an object from the canvas:\r\n\r\n```\r\npaint.remove(blinkingCircle)\r\n```\r\n\r\n## Updates\r\n\r\n### 2.0.0\r\n\r\nModified ```.polygon()``` API. It now takes an array of arrays of coordinates so that polygons can have holes.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}